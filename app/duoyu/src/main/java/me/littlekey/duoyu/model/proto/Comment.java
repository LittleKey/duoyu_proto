// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: model/model.proto at 68:1
package me.littlekey.duoyu.model.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Comment extends Message<Comment, Comment.Builder> {
  public static final ProtoAdapter<Comment> ADAPTER = new ProtoAdapter_Comment();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_COMMENT_ID = "";

  public static final String DEFAULT_CONTENT = "";

  public static final Integer DEFAULT_PUBLISH_DATE = 0;

  public static final Integer DEFAULT_LAST_EDIT_DATE = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String comment_id;

  @WireField(
      tag = 2,
      adapter = "me.littlekey.duoyu.model.proto.Diary#ADAPTER"
  )
  public final Diary diary;

  @WireField(
      tag = 3,
      adapter = "me.littlekey.duoyu.model.proto.Correct#ADAPTER"
  )
  public final Correct correct;

  @WireField(
      tag = 4,
      adapter = "me.littlekey.duoyu.model.proto.User#ADAPTER"
  )
  public final User user;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String content;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer publish_date;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer last_edit_date;

  public Comment(String comment_id, Diary diary, Correct correct, User user, String content, Integer publish_date, Integer last_edit_date) {
    this(comment_id, diary, correct, user, content, publish_date, last_edit_date, ByteString.EMPTY);
  }

  public Comment(String comment_id, Diary diary, Correct correct, User user, String content, Integer publish_date, Integer last_edit_date, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.comment_id = comment_id;
    this.diary = diary;
    this.correct = correct;
    this.user = user;
    this.content = content;
    this.publish_date = publish_date;
    this.last_edit_date = last_edit_date;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.comment_id = comment_id;
    builder.diary = diary;
    builder.correct = correct;
    builder.user = user;
    builder.content = content;
    builder.publish_date = publish_date;
    builder.last_edit_date = last_edit_date;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Comment)) return false;
    Comment o = (Comment) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(comment_id, o.comment_id)
        && Internal.equals(diary, o.diary)
        && Internal.equals(correct, o.correct)
        && Internal.equals(user, o.user)
        && Internal.equals(content, o.content)
        && Internal.equals(publish_date, o.publish_date)
        && Internal.equals(last_edit_date, o.last_edit_date);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (comment_id != null ? comment_id.hashCode() : 0);
      result = result * 37 + (diary != null ? diary.hashCode() : 0);
      result = result * 37 + (correct != null ? correct.hashCode() : 0);
      result = result * 37 + (user != null ? user.hashCode() : 0);
      result = result * 37 + (content != null ? content.hashCode() : 0);
      result = result * 37 + (publish_date != null ? publish_date.hashCode() : 0);
      result = result * 37 + (last_edit_date != null ? last_edit_date.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (comment_id != null) builder.append(", comment_id=").append(comment_id);
    if (diary != null) builder.append(", diary=").append(diary);
    if (correct != null) builder.append(", correct=").append(correct);
    if (user != null) builder.append(", user=").append(user);
    if (content != null) builder.append(", content=").append(content);
    if (publish_date != null) builder.append(", publish_date=").append(publish_date);
    if (last_edit_date != null) builder.append(", last_edit_date=").append(last_edit_date);
    return builder.replace(0, 2, "Comment{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Comment, Builder> {
    public String comment_id;

    public Diary diary;

    public Correct correct;

    public User user;

    public String content;

    public Integer publish_date;

    public Integer last_edit_date;

    public Builder() {
    }

    public Builder comment_id(String comment_id) {
      this.comment_id = comment_id;
      return this;
    }

    public Builder diary(Diary diary) {
      this.diary = diary;
      return this;
    }

    public Builder correct(Correct correct) {
      this.correct = correct;
      return this;
    }

    public Builder user(User user) {
      this.user = user;
      return this;
    }

    public Builder content(String content) {
      this.content = content;
      return this;
    }

    public Builder publish_date(Integer publish_date) {
      this.publish_date = publish_date;
      return this;
    }

    public Builder last_edit_date(Integer last_edit_date) {
      this.last_edit_date = last_edit_date;
      return this;
    }

    @Override
    public Comment build() {
      return new Comment(comment_id, diary, correct, user, content, publish_date, last_edit_date, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Comment extends ProtoAdapter<Comment> {
    ProtoAdapter_Comment() {
      super(FieldEncoding.LENGTH_DELIMITED, Comment.class);
    }

    @Override
    public int encodedSize(Comment value) {
      return (value.comment_id != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.comment_id) : 0)
          + (value.diary != null ? Diary.ADAPTER.encodedSizeWithTag(2, value.diary) : 0)
          + (value.correct != null ? Correct.ADAPTER.encodedSizeWithTag(3, value.correct) : 0)
          + (value.user != null ? User.ADAPTER.encodedSizeWithTag(4, value.user) : 0)
          + (value.content != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.content) : 0)
          + (value.publish_date != null ? ProtoAdapter.INT32.encodedSizeWithTag(6, value.publish_date) : 0)
          + (value.last_edit_date != null ? ProtoAdapter.INT32.encodedSizeWithTag(7, value.last_edit_date) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Comment value) throws IOException {
      if (value.comment_id != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.comment_id);
      if (value.diary != null) Diary.ADAPTER.encodeWithTag(writer, 2, value.diary);
      if (value.correct != null) Correct.ADAPTER.encodeWithTag(writer, 3, value.correct);
      if (value.user != null) User.ADAPTER.encodeWithTag(writer, 4, value.user);
      if (value.content != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.content);
      if (value.publish_date != null) ProtoAdapter.INT32.encodeWithTag(writer, 6, value.publish_date);
      if (value.last_edit_date != null) ProtoAdapter.INT32.encodeWithTag(writer, 7, value.last_edit_date);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Comment decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.comment_id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.diary(Diary.ADAPTER.decode(reader)); break;
          case 3: builder.correct(Correct.ADAPTER.decode(reader)); break;
          case 4: builder.user(User.ADAPTER.decode(reader)); break;
          case 5: builder.content(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.publish_date(ProtoAdapter.INT32.decode(reader)); break;
          case 7: builder.last_edit_date(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Comment redact(Comment value) {
      Builder builder = value.newBuilder();
      if (builder.diary != null) builder.diary = Diary.ADAPTER.redact(builder.diary);
      if (builder.correct != null) builder.correct = Correct.ADAPTER.redact(builder.correct);
      if (builder.user != null) builder.user = User.ADAPTER.redact(builder.user);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
