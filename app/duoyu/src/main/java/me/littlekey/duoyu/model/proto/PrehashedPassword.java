// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: comment.proto at 6:1
package me.littlekey.duoyu.model.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class PrehashedPassword extends Message<PrehashedPassword, PrehashedPassword.Builder> {
  public static final ProtoAdapter<PrehashedPassword> ADAPTER = new ProtoAdapter_PrehashedPassword();

  private static final long serialVersionUID = 0L;

  public static final ByteString DEFAULT_PREHASHED_PASSWORD = ByteString.EMPTY;

  public static final Integer DEFAULT_PREHASH_CYCLE = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString prehashed_password;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer prehash_cycle;

  public PrehashedPassword(ByteString prehashed_password, Integer prehash_cycle) {
    this(prehashed_password, prehash_cycle, ByteString.EMPTY);
  }

  public PrehashedPassword(ByteString prehashed_password, Integer prehash_cycle, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.prehashed_password = prehashed_password;
    this.prehash_cycle = prehash_cycle;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.prehashed_password = prehashed_password;
    builder.prehash_cycle = prehash_cycle;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PrehashedPassword)) return false;
    PrehashedPassword o = (PrehashedPassword) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(prehashed_password, o.prehashed_password)
        && Internal.equals(prehash_cycle, o.prehash_cycle);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (prehashed_password != null ? prehashed_password.hashCode() : 0);
      result = result * 37 + (prehash_cycle != null ? prehash_cycle.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (prehashed_password != null) builder.append(", prehashed_password=").append(prehashed_password);
    if (prehash_cycle != null) builder.append(", prehash_cycle=").append(prehash_cycle);
    return builder.replace(0, 2, "PrehashedPassword{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<PrehashedPassword, Builder> {
    public ByteString prehashed_password;

    public Integer prehash_cycle;

    public Builder() {
    }

    public Builder prehashed_password(ByteString prehashed_password) {
      this.prehashed_password = prehashed_password;
      return this;
    }

    public Builder prehash_cycle(Integer prehash_cycle) {
      this.prehash_cycle = prehash_cycle;
      return this;
    }

    @Override
    public PrehashedPassword build() {
      return new PrehashedPassword(prehashed_password, prehash_cycle, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PrehashedPassword extends ProtoAdapter<PrehashedPassword> {
    ProtoAdapter_PrehashedPassword() {
      super(FieldEncoding.LENGTH_DELIMITED, PrehashedPassword.class);
    }

    @Override
    public int encodedSize(PrehashedPassword value) {
      return (value.prehashed_password != null ? ProtoAdapter.BYTES.encodedSizeWithTag(1, value.prehashed_password) : 0)
          + (value.prehash_cycle != null ? ProtoAdapter.UINT32.encodedSizeWithTag(2, value.prehash_cycle) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PrehashedPassword value) throws IOException {
      if (value.prehashed_password != null) ProtoAdapter.BYTES.encodeWithTag(writer, 1, value.prehashed_password);
      if (value.prehash_cycle != null) ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.prehash_cycle);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PrehashedPassword decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.prehashed_password(ProtoAdapter.BYTES.decode(reader)); break;
          case 2: builder.prehash_cycle(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PrehashedPassword redact(PrehashedPassword value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
