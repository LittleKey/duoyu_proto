syntax = "proto3";

package duoyu;
option java_package = "me.littlekey.duoyu.model.proto";

import "models/proto/model/model.proto";
import "models/proto/common.proto";
import "models/proto/business/public.proto";

message HotRequest {
    common.Cursor cursor = 1;
}

message RecentRequest {
    common.Cursor cursor = 1;
}

message PublishedRequest {
    common.Cursor cursor = 1;
}

message GetPublishedByUserIdRequest {
    string user_id = 1;
    common.Cursor cursor = 2;
}

message DiariesResponse {
    repeated model.Diary diaries = 1;
    common.Cursor cursor = 2;
}

message DiaryRequest {
    model.Diary diary = 1;
}

message DiaryResponse {
    bool success = 1;
    Errno errno = 2;
    model.Diary diary = 3;
    enum Errno {
        NOT_FOUND_DIARY = 0;
        INVALID_INFO = 1;
    }
}

message FollowDiaryRequest {
    string diary_id = 1;
}

message FollowDiaryResponse {
    bool success = 1;
    Errno errno = 2;
    enum Errno {
        NOT_FOUND_DIARY = 0;
        ALREADY_FOLLOWING = 1;
    }
}

message UnfollowDiaryRequest {
    string diary_id = 1;
}

message UnfollowDiaryResponse {
    bool success = 1;
    Errno errno = 2;
    enum Errno {
        NOT_FOUND_DIARY = 0;
        NOT_FOLLOWING = 1;
    }
}

message DiaryFollowerRequest {
    string diary_id = 1;
    common.Cursor cursor = 2;
}

message DiaryFollowerResponse {
    repeated model.User users = 1;
}

message DiaryFollowingRequest {
    string diary_id = 1;
    common.Cursor cursor = 2;
}

message DiaryFollowingResponse {
    repeated model.Diary diaries = 1;
}

service DiaryService {
    rpc hotDiaries(HotRequest) returns (DiariesResponse);
    rpc recentDiaries(RecentRequest) returns (DiariesResponse);
    rpc publishedDiaries(PublishedRequest) returns (DiariesResponse);
    rpc getPublishedDiariesByUserId(GetPublishedByUserIdRequest) returns (DiariesResponse);

    rpc followDiary(FollowDiaryRequest) returns (FollowDiaryResponse);
    rpc unfollowDiary(UnfollowDiaryRequest) returns (UnfollowDiaryResponse);
    rpc diaryFollower(DiaryFollowerRequest) returns (DiaryFollowerResponse);
    rpc diaryFollowing(DiaryFollowingRequest) returns (DiaryFollowingResponse);

    rpc likeDiary(LikeRequest) returns (LikeResponse);
    rpc unlikeDiary(UnlikeRequest) returns (UnlikeResponse);

    rpc getDiaryById(DiaryRequest) returns (DiaryResponse);
    rpc putDiary(DiaryRequest) returns (DiaryResponse);
    rpc deleteDiary(DiaryRequest) returns (DiaryResponse);
}
