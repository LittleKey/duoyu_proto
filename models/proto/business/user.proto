syntax = "proto3";

package duoyu;
option java_package = "me.littlekey.duoyu.model.proto";

import "models/proto/model/model.proto";
import "models/proto/common.proto";

message CurrentRequest {
}

message CurrentResponse {
    bool success = 1;
    model.User user = 2;
}

message GetUserByIdRequest {
    string user_id = 1;
}

message GetUserByIdResponse {
    bool success = 1;
    model.User user = 2;
    Errno errno = 3;
    enum Errno {
        NOT_FOUND_USER = 0;
    }
}

message FollowRequest {
    string user_id = 1;
}

message FollowResponse {
    bool success = 1;
    model.User.Relationship relationship = 2;
    Errno errno = 3;
    enum Errno {
        NOT_FOUND_USER = 0;
        ALREADY_FOLLOWING = 1;
    }
}

message UnfollowRequest {
    string user_id = 1;
}

message UnfollowResponse {
    bool success = 1;
    model.User.Relationship relationship = 2;
    Errno errno = 3;
    enum Errno {
        NOT_FOUND_USER = 0;
        NOT_FOLLOWING = 1;
    }
}

message FollowerRequest {
    string user_id = 1;
    common.Cursor cursor = 2;
}

message FollowerResponse {
    repeated model.User users = 1;
    common.Cursor cursor = 2;
}

message FollowingRequest {
    string user_id = 1;
    common.Cursor cursor = 2;
}

message FollowingResponse {
    repeated model.User users = 1;
    common.Cursor cursor = 2;
}

message MakeFriendRequest {
    int32 number = 1;
}

message MakeFriendResponse {
    bool success = 1;
    Errno errno = 2;
    enum Errno {
        NOT_FOUND_USER = 0;
        ALREADY_FOLLOW = 1;
    }
}

message TimelineRequest {
    common.Cursor cursor = 1;
}

message GetTimelineByUserIdRequest {
    string user_id = 1;
    common.Cursor cursor = 2;
}

message TimelineResponse {
    repeated model.Happening happenings = 1;
}

message UploadImageRequest {
    bytes image = 1;
}

message UploadImageResponse {
    bool success = 1;
    string image_id = 2;
    Errno errno = 3;
    enum Errno {
        UNKNOWN = 0;
        IMAGE_TOO_LARGE = 1;
        UPLOAD_FAILURE = 2;
    }
}

service UserService {
    rpc currentUser(CurrentRequest) returns (CurrentResponse);
    rpc getUserById(GetUserByIdRequest) returns (GetUserByIdResponse);

    rpc follow(FollowRequest) returns (FollowResponse);
    rpc unfollow(UnfollowRequest) returns (UnfollowResponse);
    rpc followerList(FollowerRequest) returns (FollowerResponse);
    rpc followingList(FollowingRequest) returns (FollowingResponse);

    rpc makeFriend(MakeFriendRequest) returns (MakeFriendResponse);

    rpc UserTimeline(TimelineRequest) returns (TimelineResponse);
    rpc GetTimelineByUserId(GetTimelineByUserIdRequest) returns (TimelineResponse);

    rpc uploadImage(UploadImageRequest) returns (UploadImageResponse);
}
